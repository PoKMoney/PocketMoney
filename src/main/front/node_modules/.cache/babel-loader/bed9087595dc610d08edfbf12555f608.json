{"ast":null,"code":"// promise 요청 타임아웃 시간 선언\nconst TIME_OUT = 300 * 1000; // 에러 처리를 위한 status 선언\n\nconst statusError = {\n  status: false,\n  json: {\n    error: [\"연결이 원활하지 않습니다. 잠시 후 다시 시도해 주세요\"]\n  }\n}; // 백으로 요청할 promis\n\nconst requestPromise = (url, option) => {\n  return fetch(url, option);\n}; // promise 타임아웃 처리\n\n\nconst timeoutPromise = () => {\n  return new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), TIME_OUT));\n}; // promise 요청\n\n\nconst getPromise = async (url, option) => {\n  return await Promise.race([requestPromise(url, option), timeoutPromise()]);\n}; // 백으로 로그인 요청\n\n\nexport const loginUser = async credentials => {\n  const option = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json;charset=UTF-8'\n    },\n    body: JSON.stringify(credentials)\n  };\n  const data = await getPromise('/login-url', option).catch(() => {\n    return statusError;\n  });\n\n  if (parseInt(Number(data.status) / 100) === 2) {\n    const status = data.ok;\n    const code = data.status;\n    const text = await data.text();\n    const json = text.length ? JSON.parse(text) : \"\";\n    return {\n      status,\n      code,\n      json\n    };\n  } else {\n    return statusError;\n  }\n}; //logout\n\nexport const requestToken = async refreshToken => {\n  const option = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json;charset=UTF-8'\n    },\n    body: JSON.stringify({\n      refresh_token: refreshToken\n    })\n  };\n  const data = await getPromise('/login-url', option).catch(() => {\n    return statusError;\n  });\n\n  if (parseInt(Number(data.status) / 100) === 2) {\n    const status = data.ok;\n    const code = data.status;\n    const text = await data.text();\n    const json = text.length ? JSON.parse(text) : \"\";\n    return {\n      status,\n      code,\n      json\n    };\n  } else {\n    return statusError;\n  }\n};","map":{"version":3,"names":["TIME_OUT","statusError","status","json","error","requestPromise","url","option","fetch","timeoutPromise","Promise","_","reject","setTimeout","Error","getPromise","race","loginUser","credentials","method","headers","body","JSON","stringify","data","catch","parseInt","Number","ok","code","text","length","parse","requestToken","refreshToken","refresh_token"],"sources":["/Users/hayeon/Documents/PocketMoney/src/main/front/src/api/Users.js"],"sourcesContent":["// promise 요청 타임아웃 시간 선언\nconst TIME_OUT = 300*1000;\n\n// 에러 처리를 위한 status 선언\nconst statusError = {\n    status: false,\n    json: {\n        error: [\"연결이 원활하지 않습니다. 잠시 후 다시 시도해 주세요\"]\n    }\n};\n\n// 백으로 요청할 promis\nconst requestPromise = (url, option) => {\n    return fetch(url, option);\n};\n\n// promise 타임아웃 처리\nconst timeoutPromise = () => {\n    return new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), TIME_OUT));\n};\n\n// promise 요청\nconst getPromise = async (url, option) => {\n    return await Promise.race([\n                                  requestPromise(url, option),\n                                  timeoutPromise()\n                              ]);\n};\n\n// 백으로 로그인 요청\nexport const loginUser = async (credentials) => {\n    const option = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify(credentials)\n    };\n\n    const data = await getPromise('/login-url', option).catch(() => {\n        return statusError;\n    });\n\n    if (parseInt(Number(data.status)/100)===2) {\n        const status = data.ok;\n        const code = data.status;\n        const text = await data.text();\n        const json = text.length ? JSON.parse(text) : \"\";\n\n        return {\n            status,\n            code,\n            json\n        };\n    } else {\n        return statusError;\n    }\n};\n\n\n//logout\nexport const requestToken = async (refreshToken) => {\n    const option = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({ refresh_token: refreshToken })\n    }\n\n    const data = await getPromise('/login-url', option).catch(() => {\n        return statusError;\n    });\n\n    if (parseInt(Number(data.status)/100)===2) {\n        const status = data.ok;\n        const code = data.status;\n        const text = await data.text();\n        const json = text.length ? JSON.parse(text) : \"\";\n\n        return {\n            status,\n            code,\n            json\n        };\n    } else {\n        return statusError;\n    }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}